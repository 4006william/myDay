{"version":3,"sources":["components/NewToDo.js","components/NavBar.js","components/EditToDo.js","components/ToDo.js","serviceWorker.js","index.js","App.js"],"names":["NewToDo","addTask","clickNew","setClickNew","useState","moment","Date","now","format","date","setDate","classes","makeStyles","root","width","margin","newToDo","display","flexDirection","padding","cardActions","justifyContent","alignItems","cardButtons","fontWeight","fontSize","color","marginBottom","useStyles","className","onSubmit","event","preventDefault","Card","CardContent","TextField","id","label","name","variant","required","multiline","rows","utils","DateFnsUtils","disableToolbar","value","minDate","onChange","KeyboardButtonProps","CardActions","Button","type","onClick","NavBar","setFilter","button","EditToDo","task","editClicked","setEditClicked","editTask","taskIndex","title","description","dueDate","completed","editedTask","setEditedTask","handleEditedChange","target","edit","editDetails","paddingTop","index","ExpansionPanel","editPanel","ExpansionPanelSummary","expandIcon","aria-label","aria-controls","style","ExpansionPanelDetails","buttonContainer","ToDo","updateCompleted","removeTask","toDoContainer","toDo","toDoSummary","toDoDetails","textAlign","FormControlLabel","stopPropagation","onFocus","control","Checkbox","checked","startOf","fromNow","Typography","Boolean","window","location","hostname","match","ReactDOM","render","tasks","setTasks","filter","newTasks","newTask","splice","findIndexOfTask","i","length","isEqual","mainContainer","map","key","filterByCompleted","filterByToday","filterByUpcoming","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.517bce34.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport \"date-fns\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker\r\n} from \"@material-ui/pickers\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport default function NewToDo({ addTask, clickNew, setClickNew }) {\r\n  const [date, setDate] = useState(moment(Date.now()).format(\"MMMM DD YYYY\"));\r\n\r\n  const handleDateChange = date => {\r\n    setDate(moment(date).format(\"MMMM DD YYYY\"));\r\n  };\r\n\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      width: \"75%\",\r\n      margin: \"auto\"\r\n    },\r\n    newToDo: {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      padding: \"2em\"\r\n    },\r\n    cardActions: {\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\"\r\n    },\r\n    cardButtons: {\r\n      fontWeight: \"bold\",\r\n      fontSize: \"16px\",\r\n      color: \"#082e78\",\r\n      marginBottom: \"2em\"\r\n    }\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <form\r\n        onSubmit={event => {\r\n          event.preventDefault();\r\n          addTask(event, date);\r\n          setClickNew(!clickNew);\r\n        }}\r\n      >\r\n        <Card>\r\n          <CardContent className={classes.newToDo}>\r\n            <TextField\r\n              id=\"standard-basic\"\r\n              label=\"Title\"\r\n              name=\"title\"\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n              required\r\n            />\r\n            <br></br>\r\n            <TextField\r\n              id=\"outlined-multiline-static\"\r\n              label=\"Description\"\r\n              name=\"description\"\r\n              multiline\r\n              rows=\"3\"\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n            />\r\n\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n              <KeyboardDatePicker\r\n                disableToolbar\r\n                variant=\"inline\"\r\n                format=\"MM/dd/yyyy\"\r\n                margin=\"normal\"\r\n                id=\"date-picker-inline\"\r\n                label=\"Due Date\"\r\n                value={date}\r\n                minDate={moment(Date.now()).format(\"MMMM DD YYYY\")}\r\n                onChange={handleDateChange}\r\n                KeyboardButtonProps={{\r\n                  \"aria-label\": \"change date\"\r\n                }}\r\n                required\r\n              />\r\n            </MuiPickersUtilsProvider>\r\n          </CardContent>\r\n          <CardActions className={classes.cardActions}>\r\n            <Button className={classes.cardButtons} type=\"submit\">\r\n              Create\r\n            </Button>\r\n            <Button\r\n              className={classes.cardButtons}\r\n              onClick={() => setClickNew(!clickNew)}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport NewToDo from \"./NewToDo\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport default function NavBar({ addTask, setFilter }) {\r\n  const [clickNew, setClickNew] = useState(false);\r\n\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      width: \"100%\",\r\n      marginBottom: \"2em\"\r\n    },\r\n    button: {\r\n      margin: \"2em 1em\",\r\n      color: \"white\",\r\n      fontSize: \"18px\",\r\n      \"&:hover\": {\r\n        fontWeight: \"bold\"\r\n      }\r\n    }\r\n  });\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <Button className={classes.button} onClick={() => setClickNew(!clickNew)}>\r\n        New\r\n      </Button>\r\n\r\n      <Button className={classes.button} onClick={() => setFilter(\"all\")}>\r\n        All\r\n      </Button>\r\n      <Button className={classes.button} onClick={() => setFilter(\"completed\")}>\r\n        Completed\r\n      </Button>\r\n      <Button className={classes.button} onClick={() => setFilter(\"today\")}>\r\n        Today\r\n      </Button>\r\n      <Button className={classes.button} onClick={() => setFilter(\"upcoming\")}>\r\n        Upcoming\r\n      </Button>\r\n\r\n      {clickNew && (\r\n        <NewToDo\r\n          addTask={addTask}\r\n          clickNew={clickNew}\r\n          setClickNew={setClickNew}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport \"date-fns\";\r\n\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker\r\n} from \"@material-ui/pickers\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport default function EditToDo({\r\n  task,\r\n  editClicked,\r\n  setEditClicked,\r\n  editTask,\r\n  taskIndex\r\n}) {\r\n  const [editedTask, setEditedTask] = useState({\r\n    title: task.title,\r\n    description: task.description,\r\n    dueDate: task.dueDate,\r\n    completed: task.completed\r\n  });\r\n\r\n  const handleDateChange = date => {\r\n    setEditedTask({\r\n      ...editedTask,\r\n      dueDate: moment(date).format(\"MMMM DD YYYY\")\r\n    });\r\n  };\r\n\r\n  const handleEditedChange = name => event => {\r\n    setEditedTask({ ...editedTask, [name]: event.target.value });\r\n  };\r\n\r\n  const useStyles = makeStyles({\r\n    edit: {\r\n      width: \"70%\"\r\n    },\r\n    editDetails: {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      \"& section\": {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        paddingTop: \"2em\"\r\n      }\r\n    },\r\n    cardButtons: {\r\n      fontWeight: \"bold\",\r\n      fontSize: \"16px\",\r\n      color: \"#6850f0\"\r\n    }\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.edit}>\r\n      <form\r\n        onSubmit={event => {\r\n          event.preventDefault();\r\n          const index = taskIndex(task);\r\n          editTask(index, editedTask);\r\n          setEditClicked(!editClicked);\r\n        }}\r\n      >\r\n        <ExpansionPanel className={classes.editPanel}>\r\n          <ExpansionPanelSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n            aria-label=\"Expand\"\r\n            aria-controls=\"additional-actions1-content\"\r\n            id=\"additional-actions1-header\"\r\n          >\r\n            <TextField\r\n              style={{ width: \"100%\" }}\r\n              id=\"standard-basic\"\r\n              label=\"Title\"\r\n              name=\"title\"\r\n              value={editedTask.title}\r\n              onChange={handleEditedChange(\"title\")}\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n              required\r\n            />\r\n          </ExpansionPanelSummary>\r\n          <ExpansionPanelDetails className={classes.editDetails}>\r\n            <TextField\r\n              style={{ width: \"100%\" }}\r\n              id=\"outlined-multiline-static\"\r\n              label=\"Description\"\r\n              name=\"description\"\r\n              value={editedTask.description}\r\n              onChange={handleEditedChange(\"description\")}\r\n              multiline\r\n              rows=\"3\"\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n            />\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n              <KeyboardDatePicker\r\n                disableToolbar\r\n                variant=\"inline\"\r\n                format=\"MM/dd/yyyy\"\r\n                margin=\"normal\"\r\n                id=\"date-picker-inline\"\r\n                label=\"Due Date\"\r\n                value={editedTask.dueDate}\r\n                minDate={moment(Date.now()).format(\"MMMM DD YYYY\")}\r\n                onChange={event => handleDateChange(event)}\r\n                KeyboardButtonProps={{\r\n                  \"aria-label\": \"change date\"\r\n                }}\r\n                required\r\n              />\r\n            </MuiPickersUtilsProvider>\r\n\r\n            <section className={classes.buttonContainer}>\r\n              <Button className={classes.cardButtons} type=\"submit\">\r\n                Save\r\n              </Button>\r\n              <Button\r\n                className={classes.cardButtons}\r\n                onClick={() => setEditClicked(!editClicked)}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </section>\r\n          </ExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n      </form>\r\n    </div>\r\n  );\r\n}","import React, { useState } from \"react\";\r\nimport moment from \"moment\";\r\n\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport EditToDo from \"./EditToDo\";\r\n\r\nexport default function ToDo({\r\n  updateCompleted,\r\n  removeTask,\r\n  editTask,\r\n  task,\r\n  taskIndex\r\n}) {\r\n  const [editClicked, setEditClicked] = useState(false);\r\n\r\n  const useStyles = makeStyles({\r\n    toDoContainer: {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      padding: \"1em\",\r\n      width: \"100%\"\r\n    },\r\n    toDo: {\r\n      width: \"80%\"\r\n    },\r\n    toDoSummary: {\r\n      fontSize: \"20px\",\r\n      fontWeight: \"bold\",\r\n      \"& span\": {\r\n        fontSize: \"20px\",\r\n        fontWeight: \"bold\"\r\n      },\r\n      \"& div:first-child\": {\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        alignItems: \"center\"\r\n      }\r\n    },\r\n    toDoDetails: {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      textAlign: \"left\",\r\n      \"& p\": {\r\n        fontSize: \"20px\"\r\n      },\r\n      \"& section\": {\r\n        textAlign: \"right\",\r\n        color: \"#6850f0\"\r\n      }\r\n    }\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.toDoContainer}>\r\n      {!editClicked && (\r\n        <ExpansionPanel className={classes.toDo}>\r\n          <ExpansionPanelSummary\r\n            className={classes.toDoSummary}\r\n            expandIcon={<ExpandMoreIcon />}\r\n            aria-label=\"Expand\"\r\n            aria-controls=\"additional-actions1-content\"\r\n            id=\"additional-actions1-header\"\r\n          >\r\n            <FormControlLabel\r\n              aria-label=\"Acknowledge\"\r\n              onClick={event => {\r\n                event.stopPropagation();\r\n                const index = taskIndex(task);\r\n                updateCompleted(index);\r\n              }}\r\n              onFocus={event => event.stopPropagation()}\r\n              control={<Checkbox checked={task.completed ? true : false} />}\r\n              label={task.title}\r\n            />\r\n\r\n            {task.completed ? \"DONE\" : \"PENDING \"}\r\n\r\n            {task.dueDate >\r\n              moment(new Date(Date.now())).format(\"MMMM DD YYYY\") &&\r\n              `(due\r\n            ${moment(task.dueDate)\r\n              .startOf(\"day\")\r\n              .fromNow()})`}\r\n          </ExpansionPanelSummary>\r\n\r\n          <ExpansionPanelDetails className={classes.toDoDetails}>\r\n            <Typography color=\"textSecondary\">{task.description}</Typography>\r\n            <Typography color=\"textSecondary\">\r\n              Due date: {task.dueDate}\r\n            </Typography>\r\n            <section>\r\n              <EditIcon onClick={() => setEditClicked(!editClicked)} />\r\n              <DeleteIcon\r\n                onClick={() => {\r\n                  const index = taskIndex(task);\r\n                  removeTask(index);\r\n                }}\r\n              />\r\n            </section>\r\n          </ExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n      )}\r\n\r\n      {editClicked && (\r\n        <EditToDo\r\n          editClicked={editClicked}\r\n          setEditClicked={setEditClicked}\r\n          editTask={editTask}\r\n          task={task}\r\n          taskIndex={taskIndex}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from \"react\";\nimport moment from \"moment\";\nimport isEqual from \"lodash/isEqual\";\n\nimport NavBar from \"./components/NavBar\";\nimport ToDo from \"./components/ToDo\";\n\nimport \"./App.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nexport default function App() {\n  const [tasks, setTasks] = useState([\n    {\n      title: \"Do Laundry\",\n      description: \"make sure all laundry is done\",\n      dueDate: \"January 11, 2020\",\n      completed: false\n    },\n    {\n      title: \"  Call Granny for cookies\",\n      description: \"call to remind granny to get cookies ready for pickup\",\n      dueDate: moment(Date.now()).format(\"MMMM DD YYYY\"),\n      completed: false\n    }\n  ]);\n  const [filter, setFilter] = useState(\"all\");\n\n  // Basic features of the ToDo app\n  const updateCompleted = index => {\n    const newTasks = [...tasks];\n    newTasks[index].completed = !tasks[index].completed;\n    setTasks(newTasks);\n  };\n\n  const addTask = (event, date) => {\n    const newTasks = [\n      ...tasks,\n      {\n        title: event.target.title.value,\n        description: event.target.description.value,\n        dueDate: date,\n        completed: false\n      }\n    ];\n    setTasks(newTasks);\n  };\n\n  const removeTask = index => {\n    const newTask = [...tasks];\n    newTask.splice(index, 1);\n    setTasks(newTask);\n  };\n\n  const editTask = (index, editedTask) => {\n    const newTask = [...tasks];\n    newTask.splice(index, 1);\n    newTask.splice(index, 0, editedTask);\n\n    setTasks(newTask);\n  };\n\n  const findIndexOfTask = task => {\n    for (let i = 0; i < tasks.length; i++) {\n      if (isEqual(tasks[i], task)) {\n        return i;\n      }\n    }\n  };\n\n  // Filter options\n  const filterByCompleted = tasks => {\n    const completedTasks = tasks.filter(task => task.completed === true);\n    return completedTasks.map((task, index) => (\n      <ToDo\n        key={index}\n        updateCompleted={updateCompleted}\n        removeTask={removeTask}\n        editTask={editTask}\n        task={task}\n        taskIndex={findIndexOfTask}\n      />\n    ));\n  };\n\n  const filterByUpcoming = tasks => {\n    const upcomingTasks = tasks.filter(\n      task => task.dueDate > moment(Date.now()).format(\"MMMM DD YYYY\")\n    );\n    return upcomingTasks.map((task, index) => (\n      <ToDo\n        key={index}\n        updateCompleted={updateCompleted}\n        removeTask={removeTask}\n        editTask={editTask}\n        task={task}\n        taskIndex={findIndexOfTask}\n      />\n    ));\n  };\n\n  const filterByToday = tasks => {\n    const todayTasks = tasks.filter(\n      task => task.dueDate === moment(Date.now()).format(\"MMMM DD YYYY\")\n    );\n    return todayTasks.map((task, index) => (\n      <ToDo\n        key={index}\n        updateCompleted={updateCompleted}\n        removeTask={removeTask}\n        editTask={editTask}\n        task={task}\n        taskIndex={findIndexOfTask}\n      />\n    ));\n  };\n\n  const useStyles = makeStyles({\n    mainContainer: {\n      textAlign: \"center\",\n      marginBottom: \"2em\",\n      \"& h3\": {\n        fontSize: \"40px\",\n        marginBottom: \"1em\"\n      }\n    },\n    title: {\n      fontSize: \"60px\",\n      textAlign: \"center\",\n      paddingTop: \"1em\"\n    }\n  });\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.mainContainer}>\n      <h1 className={classes.title}>myDay</h1>\n      <NavBar addTask={addTask} filter={filter} setFilter={setFilter} />\n\n      {filter === \"all\" && (\n        <div>\n          <h3>All</h3>\n          {tasks.map((task, index) => (\n            <ToDo\n              key={index}\n              updateCompleted={updateCompleted}\n              removeTask={removeTask}\n              editTask={editTask}\n              task={task}\n              taskIndex={findIndexOfTask}\n            />\n          ))}\n        </div>\n      )}\n\n      {filter === \"completed\" && (\n        <div>\n          <h3>Completed</h3>\n          {filterByCompleted(tasks)}\n        </div>\n      )}\n      {filter === \"today\" && (\n        <div>\n          <h3>Today</h3>\n          {filterByToday(tasks)}\n        </div>\n      )}\n      {filter === \"upcoming\" && (\n        <div>\n          <h3>Upcoming</h3>\n          {filterByUpcoming(tasks)}\n        </div>\n      )}\n    </div>\n  );\n}\n\n"],"sourceRoot":""}